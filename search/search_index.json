{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Governing Equations of Projectile Motion Projectile motion follows Newton's laws under constant acceleration due to gravity. The basic equations for a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal are: Equations of Motion Horizontal motion (constant velocity): $$ x(t) = v_0 \\cos(\\theta) t $$ Vertical motion (accelerated motion under gravity): $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ Time of Flight The total time of flight can be found by setting \\( y(t) = 0 \\) (when the projectile returns to the ground): $$ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Range of the Projectile The horizontal range is given by: $$ R = v_0 \\cos(\\theta) \\cdot t_f $$ Substituting \\( t_f \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation shows that the range depends on both the initial velocity and the launch angle. 2. Analysis of the Range The maximum range occurs when \\( \\sin(2\\theta) = 1 \\) , i.e., at \\( \\theta = 45^\\circ \\) . Increasing \\( v_0 \\) increases the range quadratically. Increasing \\( g \\) (e.g., on planets with stronger gravity) decreases the range. 3. Practical Applications Sports : Optimization of throwing angles in javelin, shot put, and soccer. Engineering : Ballistics and missile trajectory predictions. Astrophysics : Calculations for planetary landings, where gravity varies. 4. Implementation in Python ```python import numpy as np import matplotlib.pyplot as plt Constants g = 9.81 # gravitational acceleration (m/s^2) v0 = 20 # initial velocity (m/s) angles = np.linspace(0, 90, 100) # angles from 0 to 90 degrees Compute range for each angle ranges = (v0**2 * np.sin(2 * np.radians(angles))) / g Find the angle with the maximum range optimal_angle = angles[np.argmax(ranges)] max_range = max(ranges) Plot plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=\"Projectile Range\") plt.axvline(x=optimal_angle, color='r', linestyle=\"--\", label=f\"Max Range at {optimal_angle:.1f}\u00b0\") plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Angle of Projection\") plt.legend() plt.grid() plt.show() print(f\"Maximum range of {max_range:.2f} meters occurs at {optimal_angle:.1f} degrees.\")","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations-of-projectile-motion","text":"Projectile motion follows Newton's laws under constant acceleration due to gravity. The basic equations for a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal are:","title":"Governing Equations of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"Horizontal motion (constant velocity): $$ x(t) = v_0 \\cos(\\theta) t $$ Vertical motion (accelerated motion under gravity): $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$","title":"Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"The total time of flight can be found by setting \\( y(t) = 0 \\) (when the projectile returns to the ground): $$ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} $$","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-of-the-projectile","text":"The horizontal range is given by: $$ R = v_0 \\cos(\\theta) \\cdot t_f $$ Substituting \\( t_f \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation shows that the range depends on both the initial velocity and the launch angle.","title":"Range of the Projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The maximum range occurs when \\( \\sin(2\\theta) = 1 \\) , i.e., at \\( \\theta = 45^\\circ \\) . Increasing \\( v_0 \\) increases the range quadratically. Increasing \\( g \\) (e.g., on planets with stronger gravity) decreases the range.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : Optimization of throwing angles in javelin, shot put, and soccer. Engineering : Ballistics and missile trajectory predictions. Astrophysics : Calculations for planetary landings, where gravity varies.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-in-python","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"4. Implementation in Python"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#constants","text":"g = 9.81 # gravitational acceleration (m/s^2) v0 = 20 # initial velocity (m/s) angles = np.linspace(0, 90, 100) # angles from 0 to 90 degrees","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#compute-range-for-each-angle","text":"ranges = (v0**2 * np.sin(2 * np.radians(angles))) / g","title":"Compute range for each angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#find-the-angle-with-the-maximum-range","text":"optimal_angle = angles[np.argmax(ranges)] max_range = max(ranges)","title":"Find the angle with the maximum range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot","text":"plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=\"Projectile Range\") plt.axvline(x=optimal_angle, color='r', linestyle=\"--\", label=f\"Max Range at {optimal_angle:.1f}\u00b0\") plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Angle of Projection\") plt.legend() plt.grid() plt.show() print(f\"Maximum range of {max_range:.2f} meters occurs at {optimal_angle:.1f} degrees.\")","title":"Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation Governing Equation The motion of a forced damped pendulum is governed by the differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega_d t) \\] where: - \\( \\theta \\) is the angular displacement, - \\( b \\) is the damping coefficient, - \\( g \\) is gravitational acceleration, - \\( L \\) is the length of the pendulum, - \\( A \\) is the amplitude of the external forcing, - \\( \\omega_d \\) is the driving frequency. For small angles, we approximate \\( \\sin(\\theta) \\approx \\theta \\) , leading to a linearized form: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega_d t) \\] Resonance and Energy Considerations Resonance occurs when the driving frequency matches the system's natural frequency: $$ \\omega_0 = \\sqrt{\\frac{g}{L}} $$ The energy in the system fluctuates due to damping and external forcing, leading to phenomena such as periodic, quasiperiodic, and chaotic motion. 2. Implementation in Python ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Constants g = 9.81 # gravitational acceleration (m/s^2) L = 1.0 # length of pendulum (m) b = 0.2 # damping coefficient A = 1.2 # driving amplitude omega_d = 2.0 # driving frequency Differential equation for the forced damped pendulum def forced_damped_pendulum(t, y, b, A, omega_d): theta, omega = y dydt = [ omega, -b * omega - (g / L) * np.sin(theta) + A * np.cos(","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The motion of a forced damped pendulum is governed by the differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega_d t) \\] where: - \\( \\theta \\) is the angular displacement, - \\( b \\) is the damping coefficient, - \\( g \\) is gravitational acceleration, - \\( L \\) is the length of the pendulum, - \\( A \\) is the amplitude of the external forcing, - \\( \\omega_d \\) is the driving frequency. For small angles, we approximate \\( \\sin(\\theta) \\approx \\theta \\) , leading to a linearized form: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega_d t) \\]","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-and-energy-considerations","text":"Resonance occurs when the driving frequency matches the system's natural frequency: $$ \\omega_0 = \\sqrt{\\frac{g}{L}} $$ The energy in the system fluctuates due to damping and external forcing, leading to phenomena such as periodic, quasiperiodic, and chaotic motion.","title":"Resonance and Energy Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-implementation-in-python","text":"```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp","title":"2. Implementation in Python"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#constants","text":"g = 9.81 # gravitational acceleration (m/s^2) L = 1.0 # length of pendulum (m) b = 0.2 # damping coefficient A = 1.2 # driving amplitude omega_d = 2.0 # driving frequency","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation-for-the-forced-damped-pendulum","text":"def forced_damped_pendulum(t, y, b, A, omega_d): theta, omega = y dydt = [ omega, -b * omega - (g / L) * np.sin(theta) + A * np.cos(","title":"Differential equation for the forced damped pendulum"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius 1. Theoretical Foundation Kepler\u2019s Third Law Kepler\u2019s Third Law states that for a body orbiting another in a circular orbit, the square of the orbital period \\( T \\) is proportional to the cube of the orbital radius \\( R \\) : where: - \\( T \\) is the orbital period, - \\( R \\) is the orbital radius, - \\( G \\) is the gravitational constant, - \\( M \\) is the mass of the central body. Rearranging for \\( T \\) : \\[ T = 2\\pi \\sqrt{\\frac{R^3}{GM}} \\] This equation shows that the orbital period increases with the radius. 2. Real-World Implications Determining planetary masses: By measuring the period and radius of a moon orbiting a planet, the mass of the planet can be calculated. Satellite Orbits: Engineers use Kepler\u2019s laws to design stable orbits for communication and GPS satellites. Exoplanet Discovery: Astronomers use Kepler\u2019s Third Law to estimate the distance and mass of exoplanets by analyzing their orbital periods. 3. Implementation in Python import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3/kg/s^2) M = 5.972e24 # Mass of Earth (kg) R_values = np.linspace(7e6, 4e8, 100) # Orbital radii from 7,000 km to 400,000 km # Calculate orbital periods T_values = 2 * np.pi * np.sqrt(R_values**3 / (G * M)) # Plot T^2 vs R^3 plt.figure(figsize=(8, 5)) plt.plot(R_values**3, T_values**2, label='$T^2 \\propto R^3$', color='b') plt.xlabel('$R^3$ (m^3)') plt.ylabel('$T^2$ (s^2)') plt.title('Kepler\u2019s Third Law: $T^2$ vs $R^3$') plt.legend() plt.grid() plt.show() 4. Discussion on Extensions Elliptical Orbits: While this derivation assumes circular orbits, Kepler\u2019s Third Law extends to elliptical orbits by using the semi-major axis instead of \\( R \\) . Gravitational Interactions: Multi-body systems introduce perturbations that modify orbital periods slightly. Relativistic Effects: At very high masses or velocities, general relativity modifies the gravitational interactions beyond Newtonian predictions. 5. Conclusion This analysis confirms Kepler\u2019s Third Law through theoretical derivation and computational modeling. The relationship between \\( T^2 \\) and \\( R^3 \\) is essential in astronomy, satellite mechanics, and astrophysics, providing a fundamental link between motion and gravity.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law","text":"Kepler\u2019s Third Law states that for a body orbiting another in a circular orbit, the square of the orbital period \\( T \\) is proportional to the cube of the orbital radius \\( R \\) : where: - \\( T \\) is the orbital period, - \\( R \\) is the orbital radius, - \\( G \\) is the gravitational constant, - \\( M \\) is the mass of the central body. Rearranging for \\( T \\) : \\[ T = 2\\pi \\sqrt{\\frac{R^3}{GM}} \\] This equation shows that the orbital period increases with the radius.","title":"Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-real-world-implications","text":"Determining planetary masses: By measuring the period and radius of a moon orbiting a planet, the mass of the planet can be calculated. Satellite Orbits: Engineers use Kepler\u2019s laws to design stable orbits for communication and GPS satellites. Exoplanet Discovery: Astronomers use Kepler\u2019s Third Law to estimate the distance and mass of exoplanets by analyzing their orbital periods.","title":"2. Real-World Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-implementation-in-python","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3/kg/s^2) M = 5.972e24 # Mass of Earth (kg) R_values = np.linspace(7e6, 4e8, 100) # Orbital radii from 7,000 km to 400,000 km # Calculate orbital periods T_values = 2 * np.pi * np.sqrt(R_values**3 / (G * M)) # Plot T^2 vs R^3 plt.figure(figsize=(8, 5)) plt.plot(R_values**3, T_values**2, label='$T^2 \\propto R^3$', color='b') plt.xlabel('$R^3$ (m^3)') plt.ylabel('$T^2$ (s^2)') plt.title('Kepler\u2019s Third Law: $T^2$ vs $R^3$') plt.legend() plt.grid() plt.show()","title":"3. Implementation in Python"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-discussion-on-extensions","text":"Elliptical Orbits: While this derivation assumes circular orbits, Kepler\u2019s Third Law extends to elliptical orbits by using the semi-major axis instead of \\( R \\) . Gravitational Interactions: Multi-body systems introduce perturbations that modify orbital periods slightly. Relativistic Effects: At very high masses or velocities, general relativity modifies the gravitational interactions beyond Newtonian predictions.","title":"4. Discussion on Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-conclusion","text":"This analysis confirms Kepler\u2019s Third Law through theoretical derivation and computational modeling. The relationship between \\( T^2 \\) and \\( R^3 \\) is essential in astronomy, satellite mechanics, and astrophysics, providing a fundamental link between motion and gravity.","title":"5. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"# Problem 2 # \ud83d\ude80 Problem 2: Escape Velocities and Cosmic Velocities \ud83c\udfaf Motivation Space travel depends critically on understanding the gravitational forces of celestial bodies and the energy required to overcome them. Concepts such as escape velocity and cosmic velocities define the speed thresholds necessary for different types of motion \u2014 from stable orbiting to escaping a planet, or even a solar system entirely. These are not just theoretical physics concepts, but real-world tools used in designing missions, launching satellites, planning interplanetary trips, and one day \u2014 perhaps \u2014 achieving interstellar travel. \ud83c\udf0d Definitions of Cosmic Velocities In classical mechanics and astrodynamics, three main types of \"cosmic velocities\" are defined, each corresponding to a specific threshold in orbital mechanics: 1. \ud83d\udef0\ufe0f First Cosmic Velocity ( \\(v_1\\) ) \u2013 Orbital Velocity Definition: The minimum horizontal velocity needed for an object to enter a stable circular orbit just above the surface of a celestial body (ignoring atmosphere). Physical Interpretation: If a spacecraft reaches this velocity tangential to the surface, it will fall around the planet instead of onto it \u2014 achieving orbit. Formula: $$ v_1 = \\sqrt{\\frac{GM}{R}} $$ where: \\(G\\) is the gravitational constant: \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\cdot \\text{kg}^{-1} \\cdot \\text{s}^{-2}\\) \\(M\\) is the mass of the celestial body (kg) \\(R\\) is the radius of the celestial body (m) 2. \ud83d\ude80 Second Cosmic Velocity ( \\(v_2\\) ) \u2013 Escape Velocity Definition: The minimum velocity required to completely escape the gravitational pull of a celestial body without further propulsion. Physical Interpretation: At this velocity, the total mechanical energy (kinetic + potential) of the spacecraft becomes zero \u2014 it can reach infinity with zero velocity. Formula: $$ v_2 = \\sqrt{\\frac{2GM}{R}} = \\sqrt{2} \\cdot v_1 $$ 3. \ud83c\udf0c Third Cosmic Velocity ( \\(v_3\\) ) \u2013 Interstellar Escape Velocity Definition: The speed needed to escape both the planet\u2019s gravity and the gravity of its parent star (e.g., the Sun), and leave the solar system. Physical Interpretation: A spacecraft launched from Earth would need additional energy to escape not only Earth\u2019s gravity but also the Sun\u2019s gravitational influence. Note: \\(v_3\\) depends on the orbital velocity of the planet around the star and the relative direction of launch (same or opposite to orbital motion). It's generally derived from the total energy needed to reach the star system\u2019s edge. \ud83d\udcd0 Mathematical Background Gravitational Potential Energy: \\[ U = -\\frac{GMm}{r} \\] Kinetic Energy: \\[ K = \\frac{1}{2}mv^2 \\] Setting total mechanical energy \\(E = K + U = 0\\) gives the escape condition: $$ \\frac{1}{2}mv^2 - \\frac{GMm}{r} = 0 \\Rightarrow v = \\sqrt{\\frac{2GM}{r}} $$ This is the essence of escape velocity ( \\(v_2\\) ). For orbital motion, we only need to balance centripetal and gravitational forces: $$ \\frac{mv^2}{r} = \\frac{GMm}{r^2} \\Rightarrow v = \\sqrt{\\frac{GM}{r}} = v_1 $$ \ud83e\uddee Python Code: Calculate and Visualize Cosmic Velocities import numpy as np import matplotlib.pyplot as plt Gravitational constant G = 6.67430e-11 # in m^3 kg^-1 s^-2 Celestial bodies: name, mass (kg), radius (m) bodies = { 'Earth': (5.972e24, 6.371e6), 'Mars': (6.417e23, 3.3895e6), 'Jupiter': (1.898e27, 6.9911e7) } Compute v1 and v2 for each body results = {} for body, (mass, radius) in bodies.items(): v1 = np.sqrt(G * mass / radius) v2 = np.sqrt(2) * v1 results[body] = (v1, v2) Prepare data for visualization labels = list(results.keys()) v1_vals = [results[body][0] for body in labels] v2_vals = [results[body][1] for body in labels] x = np.arange(len(labels)) width = 0.35 Plotting plt.figure(figsize=(10, 6)) plt.bar(x - width/2, v1_vals, width, label='First Cosmic Velocity (v1)') plt.bar(x + width/2, v2_vals, width, label='Second Cosmic Velocity (v2)') plt.xticks(x, labels) plt.ylabel('Velocity (m/s)') plt.title('Cosmic Velocities for Different Celestial Bodies') plt.legend() plt.grid(True, linestyle='--', alpha=0.5) plt.tight_layout() plt.show()","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#motivation","text":"Space travel depends critically on understanding the gravitational forces of celestial bodies and the energy required to overcome them. Concepts such as escape velocity and cosmic velocities define the speed thresholds necessary for different types of motion \u2014 from stable orbiting to escaping a planet, or even a solar system entirely. These are not just theoretical physics concepts, but real-world tools used in designing missions, launching satellites, planning interplanetary trips, and one day \u2014 perhaps \u2014 achieving interstellar travel.","title":"\ud83c\udfaf Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#definitions-of-cosmic-velocities","text":"In classical mechanics and astrodynamics, three main types of \"cosmic velocities\" are defined, each corresponding to a specific threshold in orbital mechanics:","title":"\ud83c\udf0d Definitions of Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-first-cosmic-velocity-v_1-orbital-velocity","text":"Definition: The minimum horizontal velocity needed for an object to enter a stable circular orbit just above the surface of a celestial body (ignoring atmosphere). Physical Interpretation: If a spacecraft reaches this velocity tangential to the surface, it will fall around the planet instead of onto it \u2014 achieving orbit. Formula: $$ v_1 = \\sqrt{\\frac{GM}{R}} $$ where: \\(G\\) is the gravitational constant: \\(6.67430 \\times 10^{-11} \\, \\text{m}^3 \\cdot \\text{kg}^{-1} \\cdot \\text{s}^{-2}\\) \\(M\\) is the mass of the celestial body (kg) \\(R\\) is the radius of the celestial body (m)","title":"1. \ud83d\udef0\ufe0f First Cosmic Velocity (\\(v_1\\)) \u2013 Orbital Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-second-cosmic-velocity-v_2-escape-velocity","text":"Definition: The minimum velocity required to completely escape the gravitational pull of a celestial body without further propulsion. Physical Interpretation: At this velocity, the total mechanical energy (kinetic + potential) of the spacecraft becomes zero \u2014 it can reach infinity with zero velocity. Formula: $$ v_2 = \\sqrt{\\frac{2GM}{R}} = \\sqrt{2} \\cdot v_1 $$","title":"2. \ud83d\ude80 Second Cosmic Velocity (\\(v_2\\)) \u2013 Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-third-cosmic-velocity-v_3-interstellar-escape-velocity","text":"Definition: The speed needed to escape both the planet\u2019s gravity and the gravity of its parent star (e.g., the Sun), and leave the solar system. Physical Interpretation: A spacecraft launched from Earth would need additional energy to escape not only Earth\u2019s gravity but also the Sun\u2019s gravitational influence. Note: \\(v_3\\) depends on the orbital velocity of the planet around the star and the relative direction of launch (same or opposite to orbital motion). It's generally derived from the total energy needed to reach the star system\u2019s edge.","title":"3. \ud83c\udf0c Third Cosmic Velocity (\\(v_3\\)) \u2013 Interstellar Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#mathematical-background","text":"","title":"\ud83d\udcd0 Mathematical Background"},{"location":"1%20Physics/2%20Gravity/Problem_2/#gravitational-potential-energy","text":"\\[ U = -\\frac{GMm}{r} \\]","title":"Gravitational Potential Energy:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#kinetic-energy","text":"\\[ K = \\frac{1}{2}mv^2 \\] Setting total mechanical energy \\(E = K + U = 0\\) gives the escape condition: $$ \\frac{1}{2}mv^2 - \\frac{GMm}{r} = 0 \\Rightarrow v = \\sqrt{\\frac{2GM}{r}} $$ This is the essence of escape velocity ( \\(v_2\\) ). For orbital motion, we only need to balance centripetal and gravitational forces: $$ \\frac{mv^2}{r} = \\frac{GMm}{r^2} \\Rightarrow v = \\sqrt{\\frac{GM}{r}} = v_1 $$","title":"Kinetic Energy:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-code-calculate-and-visualize-cosmic-velocities","text":"import numpy as np import matplotlib.pyplot as plt","title":"\ud83e\uddee Python Code: Calculate and Visualize Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#gravitational-constant","text":"G = 6.67430e-11 # in m^3 kg^-1 s^-2","title":"Gravitational constant"},{"location":"1%20Physics/2%20Gravity/Problem_2/#celestial-bodies-name-mass-kg-radius-m","text":"bodies = { 'Earth': (5.972e24, 6.371e6), 'Mars': (6.417e23, 3.3895e6), 'Jupiter': (1.898e27, 6.9911e7) }","title":"Celestial bodies: name, mass (kg), radius (m)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#compute-v1-and-v2-for-each-body","text":"results = {} for body, (mass, radius) in bodies.items(): v1 = np.sqrt(G * mass / radius) v2 = np.sqrt(2) * v1 results[body] = (v1, v2)","title":"Compute v1 and v2 for each body"},{"location":"1%20Physics/2%20Gravity/Problem_2/#prepare-data-for-visualization","text":"labels = list(results.keys()) v1_vals = [results[body][0] for body in labels] v2_vals = [results[body][1] for body in labels] x = np.arange(len(labels)) width = 0.35","title":"Prepare data for visualization"},{"location":"1%20Physics/2%20Gravity/Problem_2/#plotting","text":"plt.figure(figsize=(10, 6)) plt.bar(x - width/2, v1_vals, width, label='First Cosmic Velocity (v1)') plt.bar(x + width/2, v2_vals, width, label='Second Cosmic Velocity (v2)') plt.xticks(x, labels) plt.ylabel('Velocity (m/s)') plt.title('Cosmic Velocities for Different Celestial Bodies') plt.legend() plt.grid(True, linestyle='--', alpha=0.5) plt.tight_layout() plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 \ud83d\udef0\ufe0f Problem 3: Trajectories of a Freely Released Payload Near Earth \ud83c\udfaf Motivation In space missions, when a spacecraft releases a payload \u2014 such as a satellite or a reentry capsule \u2014 near Earth, the object's trajectory is determined by its initial velocity , position , and the gravitational pull of Earth . Depending on these factors, the payload can: - Enter a stable orbit (elliptical) - Reenter Earth's atmosphere (suborbital) - Escape Earth\u2019s gravity (hyperbolic) - Follow a parabolic or ballistic trajectory Understanding these outcomes is critical in designing satellite deployments, reentry paths, and mission abort protocols. \ud83c\udf0c Physical Principles Newton's Law of Gravitation: \\[ \\vec{F} = -\\frac{GMm}{r^2} \\hat{r} \\] Where: - \\(G\\) is the gravitational constant - \\(M\\) is the Earth's mass - \\(m\\) is the payload's mass - \\(r\\) is the distance from Earth's center - The force is directed toward the center of Earth Equations of Motion: Using Newton\u2019s second law: $$ \\vec{F} = m \\vec{a} \\Rightarrow \\vec{a} = -\\frac{GM}{r^2} \\hat{r} $$ We numerically solve the position and velocity over time using: - Euler's Method (simple) - Runge-Kutta or scipy.integrate.solve_ivp (more accurate) \ud83e\uddee Python Simulation: Trajectory of a Payload Released Near Earth import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Constants G = 6.67430e-11 # gravitational constant (m^3/kg/s^2) M_earth = 5.972e24 # mass of Earth (kg) R_earth = 6.371e6 # radius of Earth (m) Gravitational acceleration function def gravity(t, state): x, y, vx, vy = state r = np.sqrt(x 2 + y 2) ax = -G * M_earth * x / r 3 ay = -G * M_earth * y / r 3 return [vx, vy, ax, ay] Initial conditions altitude = 300e3 # 300 km above Earth r0 = R_earth + altitude Try different initial velocities to simulate different cases v_circular = np.sqrt(G * M_earth / r0) v_escape = np.sqrt(2) * v_circular initial_states = { \"Suborbital\": [r0, 0, 0, 5000], \"Circular Orbit\": [r0, 0, 0, v_circular], \"Escape Trajectory\": [r0, 0, 0, v_escape], } Time span for simulation t_span = (0, 10000) # seconds t_eval = np.linspace(*t_span, 2000) Plotting plt.figure(figsize=(10, 10)) for label, state0 in initial_states.items(): sol = solve_ivp(gravity, t_span, state0, t_eval=t_eval, rtol=1e-8) x, y = sol.y[0], sol.y[1] plt.plot(x / 1000, y / 1000, label=label) Plot Earth theta = np.linspace(0, 2*np.pi, 300) earth_x = R_earth * np.cos(theta) / 1000 earth_y = R_earth * np.sin(theta) / 1000 plt.fill(earth_x, earth_y, color='lightblue', label='Earth') plt.title('Payload Trajectories Near Earth') plt.xlabel('x (km)') plt.ylabel('y (km)') plt.axis('equal') plt.grid(True) plt.legend() plt.show()","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3-trajectories-of-a-freely-released-payload-near-earth","text":"","title":"\ud83d\udef0\ufe0f Problem 3: Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#motivation","text":"In space missions, when a spacecraft releases a payload \u2014 such as a satellite or a reentry capsule \u2014 near Earth, the object's trajectory is determined by its initial velocity , position , and the gravitational pull of Earth . Depending on these factors, the payload can: - Enter a stable orbit (elliptical) - Reenter Earth's atmosphere (suborbital) - Escape Earth\u2019s gravity (hyperbolic) - Follow a parabolic or ballistic trajectory Understanding these outcomes is critical in designing satellite deployments, reentry paths, and mission abort protocols.","title":"\ud83c\udfaf Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#physical-principles","text":"","title":"\ud83c\udf0c Physical Principles"},{"location":"1%20Physics/2%20Gravity/Problem_3/#newtons-law-of-gravitation","text":"\\[ \\vec{F} = -\\frac{GMm}{r^2} \\hat{r} \\] Where: - \\(G\\) is the gravitational constant - \\(M\\) is the Earth's mass - \\(m\\) is the payload's mass - \\(r\\) is the distance from Earth's center - The force is directed toward the center of Earth","title":"Newton's Law of Gravitation:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equations-of-motion","text":"Using Newton\u2019s second law: $$ \\vec{F} = m \\vec{a} \\Rightarrow \\vec{a} = -\\frac{GM}{r^2} \\hat{r} $$ We numerically solve the position and velocity over time using: - Euler's Method (simple) - Runge-Kutta or scipy.integrate.solve_ivp (more accurate)","title":"Equations of Motion:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-simulation-trajectory-of-a-payload-released-near-earth","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp","title":"\ud83e\uddee Python Simulation: Trajectory of a Payload Released Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#constants","text":"G = 6.67430e-11 # gravitational constant (m^3/kg/s^2) M_earth = 5.972e24 # mass of Earth (kg) R_earth = 6.371e6 # radius of Earth (m)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_3/#gravitational-acceleration-function","text":"def gravity(t, state): x, y, vx, vy = state r = np.sqrt(x 2 + y 2) ax = -G * M_earth * x / r 3 ay = -G * M_earth * y / r 3 return [vx, vy, ax, ay]","title":"Gravitational acceleration function"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-conditions","text":"altitude = 300e3 # 300 km above Earth r0 = R_earth + altitude","title":"Initial conditions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#try-different-initial-velocities-to-simulate-different-cases","text":"v_circular = np.sqrt(G * M_earth / r0) v_escape = np.sqrt(2) * v_circular initial_states = { \"Suborbital\": [r0, 0, 0, 5000], \"Circular Orbit\": [r0, 0, 0, v_circular], \"Escape Trajectory\": [r0, 0, 0, v_escape], }","title":"Try different initial velocities to simulate different cases"},{"location":"1%20Physics/2%20Gravity/Problem_3/#time-span-for-simulation","text":"t_span = (0, 10000) # seconds t_eval = np.linspace(*t_span, 2000)","title":"Time span for simulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#plotting","text":"plt.figure(figsize=(10, 10)) for label, state0 in initial_states.items(): sol = solve_ivp(gravity, t_span, state0, t_eval=t_eval, rtol=1e-8) x, y = sol.y[0], sol.y[1] plt.plot(x / 1000, y / 1000, label=label)","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_3/#plot-earth","text":"theta = np.linspace(0, 2*np.pi, 300) earth_x = R_earth * np.cos(theta) / 1000 earth_y = R_earth * np.sin(theta) / 1000 plt.fill(earth_x, earth_y, color='lightblue', label='Earth') plt.title('Payload Trajectories Near Earth') plt.xlabel('x (km)') plt.ylabel('y (km)') plt.axis('equal') plt.grid(True) plt.legend() plt.show()","title":"Plot Earth"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}