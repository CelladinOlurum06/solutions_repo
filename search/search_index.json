{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Governing Equations of Projectile Motion Projectile motion follows Newton's laws under constant acceleration due to gravity. The basic equations for a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal are: Equations of Motion Horizontal motion (constant velocity): $$ x(t) = v_0 \\cos(\\theta) t $$ Vertical motion (accelerated motion under gravity): $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ Time of Flight The total time of flight can be found by setting \\( y(t) = 0 \\) (when the projectile returns to the ground): $$ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Range of the Projectile The horizontal range is given by: $$ R = v_0 \\cos(\\theta) \\cdot t_f $$ Substituting \\( t_f \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation shows that the range depends on both the initial velocity and the launch angle. 2. Analysis of the Range The maximum range occurs when \\( \\sin(2\\theta) = 1 \\) , i.e., at \\( \\theta = 45^\\circ \\) . Increasing \\( v_0 \\) increases the range quadratically. Increasing \\( g \\) (e.g., on planets with stronger gravity) decreases the range. 3. Practical Applications Sports : Optimization of throwing angles in javelin, shot put, and soccer. Engineering : Ballistics and missile trajectory predictions. Astrophysics : Calculations for planetary landings, where gravity varies. 4. Implementation in Python ```python import numpy as np import matplotlib.pyplot as plt Constants g = 9.81 # gravitational acceleration (m/s^2) v0 = 20 # initial velocity (m/s) angles = np.linspace(0, 90, 100) # angles from 0 to 90 degrees Compute range for each angle ranges = (v0**2 * np.sin(2 * np.radians(angles))) / g Find the angle with the maximum range optimal_angle = angles[np.argmax(ranges)] max_range = max(ranges) Plot plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=\"Projectile Range\") plt.axvline(x=optimal_angle, color='r', linestyle=\"--\", label=f\"Max Range at {optimal_angle:.1f}\u00b0\") plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Angle of Projection\") plt.legend() plt.grid() plt.show() print(f\"Maximum range of {max_range:.2f} meters occurs at {optimal_angle:.1f} degrees.\")","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations-of-projectile-motion","text":"Projectile motion follows Newton's laws under constant acceleration due to gravity. The basic equations for a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal are:","title":"Governing Equations of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"Horizontal motion (constant velocity): $$ x(t) = v_0 \\cos(\\theta) t $$ Vertical motion (accelerated motion under gravity): $$ y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$","title":"Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"The total time of flight can be found by setting \\( y(t) = 0 \\) (when the projectile returns to the ground): $$ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} $$","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-of-the-projectile","text":"The horizontal range is given by: $$ R = v_0 \\cos(\\theta) \\cdot t_f $$ Substituting \\( t_f \\) : $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation shows that the range depends on both the initial velocity and the launch angle.","title":"Range of the Projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The maximum range occurs when \\( \\sin(2\\theta) = 1 \\) , i.e., at \\( \\theta = 45^\\circ \\) . Increasing \\( v_0 \\) increases the range quadratically. Increasing \\( g \\) (e.g., on planets with stronger gravity) decreases the range.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : Optimization of throwing angles in javelin, shot put, and soccer. Engineering : Ballistics and missile trajectory predictions. Astrophysics : Calculations for planetary landings, where gravity varies.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-in-python","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"4. Implementation in Python"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#constants","text":"g = 9.81 # gravitational acceleration (m/s^2) v0 = 20 # initial velocity (m/s) angles = np.linspace(0, 90, 100) # angles from 0 to 90 degrees","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#compute-range-for-each-angle","text":"ranges = (v0**2 * np.sin(2 * np.radians(angles))) / g","title":"Compute range for each angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#find-the-angle-with-the-maximum-range","text":"optimal_angle = angles[np.argmax(ranges)] max_range = max(ranges)","title":"Find the angle with the maximum range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot","text":"plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=\"Projectile Range\") plt.axvline(x=optimal_angle, color='r', linestyle=\"--\", label=f\"Max Range at {optimal_angle:.1f}\u00b0\") plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Angle of Projection\") plt.legend() plt.grid() plt.show() print(f\"Maximum range of {max_range:.2f} meters occurs at {optimal_angle:.1f} degrees.\")","title":"Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation Governing Equation The motion of a forced damped pendulum is governed by the differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega_d t) \\] where: - \\( \\theta \\) is the angular displacement, - \\( b \\) is the damping coefficient, - \\( g \\) is gravitational acceleration, - \\( L \\) is the length of the pendulum, - \\( A \\) is the amplitude of the external forcing, - \\( \\omega_d \\) is the driving frequency. For small angles, we approximate \\( \\sin(\\theta) \\approx \\theta \\) , leading to a linearized form: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega_d t) \\] Resonance and Energy Considerations Resonance occurs when the driving frequency matches the system's natural frequency: $$ \\omega_0 = \\sqrt{\\frac{g}{L}} $$ The energy in the system fluctuates due to damping and external forcing, leading to phenomena such as periodic, quasiperiodic, and chaotic motion. 2. Implementation in Python ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Constants g = 9.81 # gravitational acceleration (m/s^2) L = 1.0 # length of pendulum (m) b = 0.2 # damping coefficient A = 1.2 # driving amplitude omega_d = 2.0 # driving frequency Differential equation for the forced damped pendulum def forced_damped_pendulum(t, y, b, A, omega_d): theta, omega = y dydt = [ omega, -b * omega - (g / L) * np.sin(theta) + A * np.cos(","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The motion of a forced damped pendulum is governed by the differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin(\\theta) = A \\cos(\\omega_d t) \\] where: - \\( \\theta \\) is the angular displacement, - \\( b \\) is the damping coefficient, - \\( g \\) is gravitational acceleration, - \\( L \\) is the length of the pendulum, - \\( A \\) is the amplitude of the external forcing, - \\( \\omega_d \\) is the driving frequency. For small angles, we approximate \\( \\sin(\\theta) \\approx \\theta \\) , leading to a linearized form: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega_d t) \\]","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-and-energy-considerations","text":"Resonance occurs when the driving frequency matches the system's natural frequency: $$ \\omega_0 = \\sqrt{\\frac{g}{L}} $$ The energy in the system fluctuates due to damping and external forcing, leading to phenomena such as periodic, quasiperiodic, and chaotic motion.","title":"Resonance and Energy Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-implementation-in-python","text":"```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp","title":"2. Implementation in Python"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#constants","text":"g = 9.81 # gravitational acceleration (m/s^2) L = 1.0 # length of pendulum (m) b = 0.2 # damping coefficient A = 1.2 # driving amplitude omega_d = 2.0 # driving frequency","title":"Constants"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#differential-equation-for-the-forced-damped-pendulum","text":"def forced_damped_pendulum(t, y, b, A, omega_d): theta, omega = y dydt = [ omega, -b * omega - (g / L) * np.sin(theta) + A * np.cos(","title":"Differential equation for the forced damped pendulum"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius 1. Theoretical Foundation Kepler\u2019s Third Law Kepler\u2019s Third Law states that for a body orbiting another in a circular orbit, the square of the orbital period \\( T \\) is proportional to the cube of the orbital radius \\( R \\) : where: - \\( T \\) is the orbital period, - \\( R \\) is the orbital radius, - \\( G \\) is the gravitational constant, - \\( M \\) is the mass of the central body. Rearranging for \\( T \\) : \\[ T = 2\\pi \\sqrt{\\frac{R^3}{GM}} \\] This equation shows that the orbital period increases with the radius. 2. Real-World Implications Determining planetary masses: By measuring the period and radius of a moon orbiting a planet, the mass of the planet can be calculated. Satellite Orbits: Engineers use Kepler\u2019s laws to design stable orbits for communication and GPS satellites. Exoplanet Discovery: Astronomers use Kepler\u2019s Third Law to estimate the distance and mass of exoplanets by analyzing their orbital periods. 3. Implementation in Python import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3/kg/s^2) M = 5.972e24 # Mass of Earth (kg) R_values = np.linspace(7e6, 4e8, 100) # Orbital radii from 7,000 km to 400,000 km # Calculate orbital periods T_values = 2 * np.pi * np.sqrt(R_values**3 / (G * M)) # Plot T^2 vs R^3 plt.figure(figsize=(8, 5)) plt.plot(R_values**3, T_values**2, label='$T^2 \\propto R^3$', color='b') plt.xlabel('$R^3$ (m^3)') plt.ylabel('$T^2$ (s^2)') plt.title('Kepler\u2019s Third Law: $T^2$ vs $R^3$') plt.legend() plt.grid() plt.show() 4. Discussion on Extensions Elliptical Orbits: While this derivation assumes circular orbits, Kepler\u2019s Third Law extends to elliptical orbits by using the semi-major axis instead of \\( R \\) . Gravitational Interactions: Multi-body systems introduce perturbations that modify orbital periods slightly. Relativistic Effects: At very high masses or velocities, general relativity modifies the gravitational interactions beyond Newtonian predictions. 5. Conclusion This analysis confirms Kepler\u2019s Third Law through theoretical derivation and computational modeling. The relationship between \\( T^2 \\) and \\( R^3 \\) is essential in astronomy, satellite mechanics, and astrophysics, providing a fundamental link between motion and gravity.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#keplers-third-law","text":"Kepler\u2019s Third Law states that for a body orbiting another in a circular orbit, the square of the orbital period \\( T \\) is proportional to the cube of the orbital radius \\( R \\) : where: - \\( T \\) is the orbital period, - \\( R \\) is the orbital radius, - \\( G \\) is the gravitational constant, - \\( M \\) is the mass of the central body. Rearranging for \\( T \\) : \\[ T = 2\\pi \\sqrt{\\frac{R^3}{GM}} \\] This equation shows that the orbital period increases with the radius.","title":"Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-real-world-implications","text":"Determining planetary masses: By measuring the period and radius of a moon orbiting a planet, the mass of the planet can be calculated. Satellite Orbits: Engineers use Kepler\u2019s laws to design stable orbits for communication and GPS satellites. Exoplanet Discovery: Astronomers use Kepler\u2019s Third Law to estimate the distance and mass of exoplanets by analyzing their orbital periods.","title":"2. Real-World Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-implementation-in-python","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant (m^3/kg/s^2) M = 5.972e24 # Mass of Earth (kg) R_values = np.linspace(7e6, 4e8, 100) # Orbital radii from 7,000 km to 400,000 km # Calculate orbital periods T_values = 2 * np.pi * np.sqrt(R_values**3 / (G * M)) # Plot T^2 vs R^3 plt.figure(figsize=(8, 5)) plt.plot(R_values**3, T_values**2, label='$T^2 \\propto R^3$', color='b') plt.xlabel('$R^3$ (m^3)') plt.ylabel('$T^2$ (s^2)') plt.title('Kepler\u2019s Third Law: $T^2$ vs $R^3$') plt.legend() plt.grid() plt.show()","title":"3. Implementation in Python"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-discussion-on-extensions","text":"Elliptical Orbits: While this derivation assumes circular orbits, Kepler\u2019s Third Law extends to elliptical orbits by using the semi-major axis instead of \\( R \\) . Gravitational Interactions: Multi-body systems introduce perturbations that modify orbital periods slightly. Relativistic Effects: At very high masses or velocities, general relativity modifies the gravitational interactions beyond Newtonian predictions.","title":"4. Discussion on Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-conclusion","text":"This analysis confirms Kepler\u2019s Third Law through theoretical derivation and computational modeling. The relationship between \\( T^2 \\) and \\( R^3 \\) is essential in astronomy, satellite mechanics, and astrophysics, providing a fundamental link between motion and gravity.","title":"5. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}